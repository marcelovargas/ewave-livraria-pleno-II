@model ReflectionIT.Mvc.Paging.PagingList<Entities.ReservaView>
@using ReflectionIT.Mvc.Paging
@addTagHelper *, ReflectionIT.Mvc.Paging

@{
    ViewData["Title"] = "Envio/Despacho de Livros";
}

<h1>@ViewData["Title"]</h1>



<nav aria-label="Suppliers navigation example">
    @await this.Component.InvokeAsync("Pager", new { pagingList = this.Model })
</nav>


<table class="table table-striped">
    <thead>
        <tr class="table-primary">
            <th>
                @Html.SortableHeaderFor(model => model.Data, this.Model)
            </th>

            <th>
                @Html.SortableHeaderFor(model => model.Capa, this.Model)
            </th>

            <th>
                @Html.SortableHeaderFor(model => model.Titulo, this.Model)
            </th>

            <th>
                @Html.SortableHeaderFor(model => model.LeitorNome, this.Model)
            </th>


            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Data)
            </td>
            <td>
                @if (!string.IsNullOrEmpty(item.Capa))
                {
                    <img src="@Url.Content(item.Capa)" alt="Image" style="width:70px;height:70px;" />
                }
                else
                {
                    <img src="~/imagens/livros/no-image.jpg" alt="Image" style="width:70px;height:70px;" />
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Titulo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LeitorNome)
            </td>

            <td id="@item.Id">
                <a asp-action="Create" asp-route-id="@item.Id" class="btn btn-outline-warning"><i class="fa fa-share"></i></a>
                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-info"><i class="fa fa-eye"></i></a>
                <a asp-action="Cancel" asp-route-id="@item.Id" class="btn btn-outline-danger" id="btnCancel"><i class="fa fa-trash"></i></a>

            </td>
        </tr>
        }
    </tbody>
</table>

<nav aria-label="Suppliers navigation example">
    @await this.Component.InvokeAsync("Pager", new { pagingList = this.Model })
</nav>

<!-- Cancelar reserva-->
<div class="modal fade" id="cancelDialog" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Cancelar reserva</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Não</button>
                <button type="button" class="btn btn-outline-danger" id="btnYes">Sim</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        $(document).ready(function () {

            var id = 0;

            $("#btnCancel").click(function () {
                $("#cancelDialog").modal('show');
                return false;
            });

            $("#btnNo").click(function () {
                $("#cancelDialog").modal('hide');
                return false;
            });


            $('a[id*=btnCancel]').click(function () {
                debugger;
                id = $(this).parent()[0].id;

                return false;
            });


            $("#btnYes").click(function () {
                window.location.href = '/Emprestimos/CancelConfirmed/' + id;
            });
        });
    </script>
}
